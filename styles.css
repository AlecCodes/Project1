body {
    color:aliceblue;
    margin: 100px;
    border: 20px;
    border-style: solid;
    border-color: red;
    padding: 40px;
    height: 100vh; 
    display: grid;
    font-family: Arial;
    background-color: black;
    /* grid-template-columns: 200px 200px 50px; */
    grid-template-rows: auto;
    grid-template-areas:
        "header location ticker"
        "sol map model"
        "extra map model"
}

@media (max-width: 1300px){
    body {
        height: 100%;
        margin: 50px;
        padding: 100px;
        grid-template-areas:
            "header location ."
            "sol map map"
            "extra ticker ."
            ". model ."
    }
}

@media (max-width: 1100px){
    body {
        height: 100%;
        margin: 0px;
        border: 0px;
        padding: 0px
    }
}

/* ticker stuff */
.twrap {
    height: 41%;
    border-style: solid;
    overflow: hidden;
    width: 300px;
    grid-area: ticker;
}
.tmove{
    display: flex;
}
.titem{
    /* fit horizontally */
    flex-shrink: 0;
    color: rgb(53, 201, 53);
    width: 140%;
    box-sizing: border-box;
    padding: 10px;
    text-align: center;
}

/* kerframes is a rule that establishes waypoints at different steps of an animation. In this case, the first 'waypoint' is at 0%, meaning the first translate3D call is executed at the beginning of the animation with an argument of 100%, so the ticker starts at the beginning of the first sentence(Using 50% for example would start mid-sentence). The second 'waypoint' is at 100%, which is the end of the animation. Calling translate3d again "at" 100% completion means I can specify how early to terminate the translation animation. Passing in a negative percentage as x coordinate accomplishes this. */

@keyframes ticker{

    /* translate3d is a css function to move an element around the page. It's three arguments are the x, y, and z coordinate for the 'translation'. For a ticker, we only need to pass a percentage into the x coordinate to move from left to right. This percentage determines starting position of ticker, and depending on the number of lines of text in the ticker, will affect the speed.*/

    0%{transform: translate3d(140%,0,0);} 
    100%{transform: translate3d(-500%,0,0);}
}
/* this attched the tmove wrapper to the keyframes, so it knows whose child elements to display on ticker. And 'Animation' accepts an argument which tells it how long animation should take */
.tmove {animation: ticker linear 15s infinite}
 /*pauses when hovered upon*/
.tmove:hover{animation-play-state: paused}

#model{
    height: 300px;
    width: 300px;
    grid-area: model;
}

/* map stuff */
#map_container{
    grid-area: map;
    height: 500px;
    width: 500px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
}
img{
    max-width: 100%;
    max-height: 100%;
    grid-area: 1 / 1 / 9 / 11;
}
.reticle:hover {
    cursor:pointer;
}
#C{
    grid-area: 4/2/5/3;
    color: aliceblue;
}
#I{
    grid-area: 3/2/4/3;
}
#P{
    grid-area: 2/9/3/10;
}

/* for extra rover info */
span {
    text-emphasis-color: red;
}
#extra{
    grid-area: extra;
    align-items:baseline;
}
#extracontainer{
    border-style: solid;
    border-color: green;
    /* width: 200px; */
}

/* sol data */
#sol1{
    grid-area: sol;
    grid-template-columns: 1fr 1fr;
}
#solcontainer{
    border-style: solid;
    border-color: green;
}

.data{
    text-align: center;
    font-size:20px;
    border-style: solid;
    border-color: green;
    border-width: 1px;
}

h1 {
    grid-area: header;
    font-size: 60px; 
}

#location{
    grid-area: location;
    text-align: center;
    align-self:flex-end
}
